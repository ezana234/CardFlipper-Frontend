{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport jwt from 'jwt-decode';\nimport useModal from './useModal';\nimport { Modal, Button } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport default function useToken() {\n  _s();\n\n  const getToken = () => {\n    const tokenString = localStorage.getItem('token');\n    const userToken = JSON.parse(tokenString);\n    console.log(userToken);\n    return userToken;\n  };\n\n  const [token, setToken] = useState(getToken());\n\n  const saveToken = userToken => {\n    localStorage.setItem('token', JSON.stringify(userToken));\n    setToken(userToken.token);\n  };\n\n  const {\n    generalModal\n  } = useModal();\n\n  const verifyToken = token => {\n    if (!token) {\n      return false;\n    }\n\n    try {\n      let decodedToken = jwt(token);\n      let dateNow = new Date();\n      console.log(\"decoded\", decodedToken);\n\n      if (decodedToken.exp < dateNow.getTime()) {\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return {\n    token,\n    setToken: saveToken,\n    checkVerifiedToken: verifyToken\n  };\n}\n\n_s(useToken, \"uU+QI2nCjiLmYpTU3wgXZB4SbLw=\", false, function () {\n  return [useModal];\n});","map":{"version":3,"sources":["C:/Users/ezana/OneDrive/Desktop/2021-2022 Fall/SecureWebAppDev/CardFlipper/frontend/src/components/useToken.js"],"names":["useState","jwt","useModal","Modal","Button","useToken","getToken","tokenString","localStorage","getItem","userToken","JSON","parse","console","log","token","setToken","saveToken","setItem","stringify","generalModal","verifyToken","decodedToken","dateNow","Date","exp","getTime","err","checkVerifiedToken"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,OAAO,sCAAP;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAlB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACA,WAAOA,SAAP;AACD,GALD;;AAOA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAACM,QAAQ,EAAT,CAAlC;;AAEA,QAAMW,SAAS,GAAGP,SAAS,IAAI;AAC7BF,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BP,IAAI,CAACQ,SAAL,CAAeT,SAAf,CAA9B;AACAM,IAAAA,QAAQ,CAACN,SAAS,CAACK,KAAX,CAAR;AACD,GAHD;;AAKA,QAAM;AAAEK,IAAAA;AAAF,MAAmBlB,QAAQ,EAAjC;;AACA,QAAMmB,WAAW,GAAIN,KAAD,IAAW;AAC7B,QAAI,CAACA,KAAL,EAAY;AACV,aAAO,KAAP;AACD;;AACD,QAAI;AACF,UAAIO,YAAY,GAAGrB,GAAG,CAACc,KAAD,CAAtB;AACA,UAAIQ,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBQ,YAAvB;;AAEA,UAAIA,YAAY,CAACG,GAAb,GAAmBF,OAAO,CAACG,OAAR,EAAvB,EAA0C;AACxC,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KATD,CASE,OAAOC,GAAP,EAAY;AACZd,MAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACD;AACF,GAhBD;;AAkBA,SAAO;AACLZ,IAAAA,KADK;AAELC,IAAAA,QAAQ,EAAEC,SAFL;AAGLW,IAAAA,kBAAkB,EAAEP;AAHf,GAAP;AAKD;;GAvCuBhB,Q;UAeGH,Q","sourcesContent":["import { useState } from 'react';\r\nimport jwt from 'jwt-decode';\r\nimport useModal from './useModal';\r\nimport { Modal, Button } from \"react-bootstrap\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nexport default function useToken() {\r\n  const getToken = () => {\r\n    const tokenString = localStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    console.log(userToken)\r\n    return userToken\r\n  };\r\n\r\n  const [token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n    localStorage.setItem('token', JSON.stringify(userToken));\r\n    setToken(userToken.token);\r\n  };\r\n\r\n  const { generalModal } = useModal();\r\n  const verifyToken = (token) => {\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    try {\r\n      let decodedToken = jwt(token);\r\n      let dateNow = new Date();\r\n      console.log(\"decoded\", decodedToken)\r\n\r\n      if (decodedToken.exp < dateNow.getTime()) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  return {\r\n    token,\r\n    setToken: saveToken,\r\n    checkVerifiedToken: verifyToken\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}