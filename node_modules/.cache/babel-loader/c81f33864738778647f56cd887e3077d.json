{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezana\\\\OneDrive\\\\Desktop\\\\2021-2022 Fall\\\\SecureWebAppDev\\\\CardFlipper\\\\CardFlipper\\\\CardFlipper\\\\frontend\\\\src\\\\containers\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useNavigate } from 'react-router-dom'; //import Form from \"react-bootstrap/Form\";\n//import Button from \"react-bootstrap/Button\";\n\nimport \"../styles/Game.css\";\nimport axios from \"axios\";\nimport * as constants from './Constants'; //import { useLocation } from \"react-router\";\n\nimport 'react-chatbox-component/dist/style.css';\nimport { ChatBox } from 'react-chatbox-component';\nimport io from \"socket.io-client\"; //import $ from \"jquery\";\n\nimport useToken from \"../components/useToken\";\nimport { Modal } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from 'jquery';\nimport Confetti from 'react-dom-confetti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  // Variables\n  // Get User and Token\n  const {\n    token,\n    user\n  } = useToken();\n  const navigate = useNavigate();\n  const [mount, setMount] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [card, setCard] = useState([]);\n  const [startVisible, setStartVisible] = useState(true);\n  const [disableStart, setDisableStart] = useState(false);\n  const [waitVisible, setWaitVisible] = useState(false);\n  let initialGameState = 0;\n  const {\n    state\n  } = useLocation();\n  const {\n    roomID\n  } = state;\n  const turn = useRef(false);\n  let count = 0;\n  const [playerTurn, setPlayerTurn] = useState(\"\");\n  let pointArray = [];\n  const userObj = {\n    uid: user\n  }; // Config object for the confetti\n\n  const config = {\n    angle: \"213\",\n    spread: 360,\n    startVelocity: 40,\n    elementCount: \"200\",\n    dragFriction: 0.12,\n    duration: 3000,\n    stagger: \"5\",\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n  const [activeConfetti, setActiveConfetti] = useState(false); // Initialize Webssockets\n\n  let chatSocket = useRef();\n  let gameSocket = useRef(); //Modal Data\n\n  const [show, setShow] = useState(false); // Message array for chatbox\n\n  const [message, setMessage] = useState(\"\");\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleMessage = text => setMessage(text); //const { state } = useLocation();\n  // Code that is run immediately \n\n\n  useEffect(() => {\n    // connect to sockets\n    startWebSocket(); // Wait about a second to connect to websockets since they just\n    // got created in the backend\n\n    setTimeout(() => {\n      // Connect to web sockets\n      chatSocket.current = io(\"http://localhost:3003/chat/\" + roomID);\n      gameSocket.current = io(\"http://localhost:3003/game/\" + roomID); // Add to message array when recieving a message\n\n      chatSocket.current.on(\"text\", message => {\n        setMessages(array => [...array, message]);\n      }); // On start\n\n      gameSocket.current.on(\"start\", start => {\n        // disable start button\n        setStartVisible(false);\n\n        if (initialGameState === 0) {\n          // Load the game state\n          SetGameState(start);\n          initialGameState++;\n        }\n      }); // On win, show which user won \n\n      gameSocket.current.on(\"win\", username => {\n        handleMessage(`${username} wins!!!`);\n        handleShow(); // Shower with confetti\n\n        setActiveConfetti(true);\n        setTimeout(() => {\n          navigate(\"/\");\n        }, 5000);\n      }); // On update, updatehe game state\n\n      gameSocket.current.on(\"update\", data => {\n        SetGameState(data);\n      });\n    }, 1500);\n    return () => {\n      setMount({});\n    };\n  }, []); // Code to initialize chat web socket\n\n  async function startWebSocket() {\n    try {\n      console.log(\"roomID: \", roomID);\n      await axios.post(constants.HOST + \"/initialize\", {\n        roomID: roomID\n      }, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      }); //setUser(await jwtDecode(token).username);\n    } catch (error) {\n      handleMessage(\"Couldn't Connect To Socket. Try Refreshing the Page.\");\n      handleShow();\n    }\n  } // Code that is called when chat is sent. Sends chat to API\n\n\n  const handleChat = async message => {\n    try {\n      console.log(\"roomID: \", roomID);\n      await axios.post(constants.HOST + \"/sendChat\", {\n        roomID: roomID,\n        message: message\n      }, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      handleMessage(\"Couldn't Send Chat Message. Try Again!\");\n      handleShow();\n    }\n  }; // Code called when Start Game button is clicked\n\n\n  async function handleStart() {\n    try {\n      await axios.put(constants.HOST + \"/start/\" + roomID, {}, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      }); // Disable the start button\n\n      setDisableStart(true); // Display message that you're waiting for the other person to continue\n\n      setWaitVisible(true);\n    } catch (error) {\n      console.log(error);\n      handleMessage(\"Couldn't Start Game. Try Again!\");\n      handleShow();\n    }\n  }\n\n  function SetGameState(obj) {\n    // Create CardArray\n    let responseCard;\n\n    if (obj.cards) {\n      console.log(\"in Cards: \", obj.cards);\n      setCard([]);\n\n      for (let i = 0; i < obj.cards.length; i++) {\n        // Hide cards if the cards have already been matched\n        const disabled = {};\n\n        if (!obj.cards[i].active) {\n          disabled[\"visibility\"] = \"hidden\";\n        } // Create card\n\n\n        responseCard = /*#__PURE__*/_jsxDEV(\"div\", {\n          style: disabled,\n          className: \"cardContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: obj.cards[i].key,\n            className: \"card\",\n            onClick: e => flip(e),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                height: \"100\",\n                width: \"100\",\n                children: /*#__PURE__*/_jsxDEV(\"image\", {\n                  className: \"Card\",\n                  href: \"/img/castle.svg\",\n                  height: \"100\",\n                  width: \"100\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                xmlns: \"http://www.w3.org/2000/svg\",\n                height: \"100\",\n                width: \"100\",\n                children: /*#__PURE__*/_jsxDEV(\"image\", {\n                  className: \"Card\",\n                  href: \"/img/\" + obj.cards[i].key + \".svg\",\n                  height: \"100\",\n                  width: \"100\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }, this)\n        }, obj.cards[i].key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 24\n        }, this);\n        setCard(array => [...array, responseCard]);\n      }\n    } // set turn\n\n\n    if (obj.users) {\n      if (obj.users.filter(userObj => userObj.userID === user)) {\n        turn.current = obj.users.filter(userObj => userObj.userID === user)[0].turn;\n      } // Set who's turn it is in string form\n\n\n      if (obj.users.filter(userObj => userObj.turn === true)[0]) {\n        setPlayerTurn(obj.users.filter(userObj => userObj.turn === true)[0].userID.split(\"#\")[0]);\n      }\n    }\n  } // Responsible for flipping the cards\n\n\n  function flip(event) {\n    //increment count flip\n    console.log(turn.current);\n\n    if (turn.current) {\n      count += 1;\n      const id = event.target.parentNode.parentNode.parentNode.id; // On first flip\n\n      if (count === 1) {\n        // Add id to array\n        pointArray.push(parseInt(id)); // Disable then flip the card\n\n        $(`#${id}`).css(\"pointer-events\", \"none\");\n        $(`#${id}`).toggleClass('flipped');\n      } // On second flip\n\n\n      if (count === 2) {\n        pointArray.push(parseInt(id));\n        $(`#${id}`).css(\"pointer-events\", \"none\");\n        $(`#${id}`).toggleClass('flipped'); // If cards match, disable immediately\n\n        verifyFlip().then(match => {\n          console.log(match); // If the cards dont match\n\n          if (!match) {\n            //Remove pointer-events: none\n            for (const card of pointArray) {\n              console.log(\"This. is starage: \", card);\n              $(`#${card}`).css(\"pointer-events\", \"\");\n            }\n\n            setTimeout(() => {\n              for (const card of pointArray) {\n                console.log(\"This. is starage: \", card);\n                $(`#${card}`).toggleClass(\"flipped\");\n              }\n\n              count = 0;\n              pointArray = [];\n              console.log(\"1: \", count);\n            }, 1000);\n          } else {\n            count = 0;\n            pointArray = [];\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n        console.log(\"2: \", count); //$(`#${id}`).toggleClass('flipped');s\n      }\n    }\n  }\n\n  ;\n\n  async function verifyFlip() {\n    // check if it's user's turn\n    try {\n      const response = await axios.put(constants.HOST + \"/room/points\", {\n        roomID: roomID,\n        points: pointArray\n      }, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      });\n      return response.data.match;\n    } catch (error) {\n      console.log(error);\n    }\n  } // HTML\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Confetti, {\n      active: activeConfetti,\n      config: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"Primary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), startVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startGame\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"RoomID: \", roomID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), waitVisible ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Waiting for other person to start the game...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 26\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleStart,\n        disabled: disableStart,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this) : null, !startVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"It's \", playerTurn, \"'s turn\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), card]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 24\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n        messages: messages,\n        user: userObj,\n        onSubmit: handleChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"/Nh9Xa/cSIUQ+haM4BiIBreVNAM=\", false, function () {\n  return [useToken, useNavigate, useLocation];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/ezana/OneDrive/Desktop/2021-2022 Fall/SecureWebAppDev/CardFlipper/CardFlipper/CardFlipper/frontend/src/containers/Game.js"],"names":["React","useState","useEffect","useRef","useLocation","useNavigate","axios","constants","ChatBox","io","useToken","Modal","Button","$","Confetti","Game","token","user","navigate","mount","setMount","messages","setMessages","card","setCard","startVisible","setStartVisible","disableStart","setDisableStart","waitVisible","setWaitVisible","initialGameState","state","roomID","turn","count","playerTurn","setPlayerTurn","pointArray","userObj","uid","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","activeConfetti","setActiveConfetti","chatSocket","gameSocket","show","setShow","message","setMessage","handleClose","handleShow","handleMessage","text","startWebSocket","setTimeout","current","on","array","start","SetGameState","username","data","console","log","post","HOST","headers","error","handleChat","handleStart","put","obj","responseCard","cards","i","length","disabled","active","key","e","flip","users","filter","userID","split","event","id","target","parentNode","push","parseInt","css","toggleClass","verifyFlip","then","match","catch","response","points"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAwC,kBAAxC,C,CACA;AACA;;AACA,OAAO,oBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B,C,CACA;;AACA,OAAO,wCAAP;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAO,sCAAP;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,oBAArB;;AAIA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B;AACA;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBP,QAAQ,EAAhC;AACA,QAAMQ,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC4B,WAAD,EAAcC,cAAd,IAAgC7B,QAAQ,CAAC,KAAD,CAA9C;AACA,MAAI8B,gBAAgB,GAAG,CAAvB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAY5B,WAAW,EAA7B;AACA,QAAM;AAAE6B,IAAAA;AAAF,MAAaD,KAAnB;AACA,QAAME,IAAI,GAAG/B,MAAM,CAAC,KAAD,CAAnB;AACA,MAAIgC,KAAK,GAAG,CAAZ;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAIqC,UAAU,GAAG,EAAjB;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,GAAG,EAAEvB;AADS,GAAhB,CAlB6B,CAqB7B;;AACA,QAAMwB,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAE,KADM;AAEbC,IAAAA,MAAM,EAAE,GAFK;AAGbC,IAAAA,aAAa,EAAE,EAHF;AAIbC,IAAAA,YAAY,EAAE,KAJD;AAKbC,IAAAA,YAAY,EAAE,IALD;AAMbC,IAAAA,QAAQ,EAAE,IANG;AAObC,IAAAA,OAAO,EAAE,GAPI;AAQbC,IAAAA,KAAK,EAAE,MARM;AASbC,IAAAA,MAAM,EAAE,MATK;AAUbC,IAAAA,WAAW,EAAE,OAVA;AAWbC,IAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C;AAXK,GAAf;AAaA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCrD,QAAQ,CAAC,KAAD,CAApD,CAnC6B,CAoC7B;;AACA,MAAIsD,UAAU,GAAGpD,MAAM,EAAvB;AACA,MAAIqD,UAAU,GAAGrD,MAAM,EAAvB,CAtC6B,CAuC7B;;AACA,QAAM,CAACsD,IAAD,EAAOC,OAAP,IAAkBzD,QAAQ,CAAC,KAAD,CAAhC,CAxC6B,CAyC7B;;AACA,QAAM,CAAC0D,OAAD,EAAUC,UAAV,IAAwB3D,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAM4D,WAAW,GAAG,MAAMH,OAAO,CAAC,KAAD,CAAjC;;AACA,QAAMI,UAAU,GAAG,MAAMJ,OAAO,CAAC,IAAD,CAAhC;;AACA,QAAMK,aAAa,GAAIC,IAAD,IAAUJ,UAAU,CAACI,IAAD,CAA1C,CA7C6B,CA8C7B;AAEA;;;AACA9D,EAAAA,SAAS,CAAC,MAAM;AACd;AACA+D,IAAAA,cAAc,GAFA,CAGd;AACA;;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf;AACAX,MAAAA,UAAU,CAACY,OAAX,GAAqB1D,EAAE,CAAC,gCAAgCwB,MAAjC,CAAvB;AACAuB,MAAAA,UAAU,CAACW,OAAX,GAAqB1D,EAAE,CAAC,gCAAgCwB,MAAjC,CAAvB,CAHe,CAIf;;AACAsB,MAAAA,UAAU,CAACY,OAAX,CAAmBC,EAAnB,CAAsB,MAAtB,EAA+BT,OAAD,IAAa;AACzCrC,QAAAA,WAAW,CAAC+C,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWV,OAAX,CAAV,CAAX;AACD,OAFD,EALe,CAQf;;AACAH,MAAAA,UAAU,CAACW,OAAX,CAAmBC,EAAnB,CAAsB,OAAtB,EAAgCE,KAAD,IAAW;AACxC;AACA5C,QAAAA,eAAe,CAAC,KAAD,CAAf;;AACA,YAAIK,gBAAgB,KAAK,CAAzB,EAA4B;AAC1B;AACAwC,UAAAA,YAAY,CAACD,KAAD,CAAZ;AACAvC,UAAAA,gBAAgB;AACjB;AAEF,OATD,EATe,CAmBf;;AACAyB,MAAAA,UAAU,CAACW,OAAX,CAAmBC,EAAnB,CAAsB,KAAtB,EAA8BI,QAAD,IAAc;AACzCT,QAAAA,aAAa,CAAE,GAAES,QAAS,UAAb,CAAb;AACAV,QAAAA,UAAU,GAF+B,CAGzC;;AACAR,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAY,QAAAA,UAAU,CAAC,MAAM;AACfhD,UAAAA,QAAQ,CAAC,GAAD,CAAR;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OARD,EApBe,CA6Bf;;AACAsC,MAAAA,UAAU,CAACW,OAAX,CAAmBC,EAAnB,CAAsB,QAAtB,EAAiCK,IAAD,IAAU;AACxCF,QAAAA,YAAY,CAACE,IAAD,CAAZ;AACD,OAFD;AAGD,KAjCS,EAiCP,IAjCO,CAAV;AAkCA,WAAO,MAAM;AAAErD,MAAAA,QAAQ,CAAC,EAAD,CAAR;AAAe,KAA9B;AACD,GAxCQ,EAwCN,EAxCM,CAAT,CAjD6B,CA2F7B;;AACA,iBAAe6C,cAAf,GAAgC;AAC9B,QAAI;AACFS,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB1C,MAAxB;AACA,YAAM3B,KAAK,CAACsE,IAAN,CAAWrE,SAAS,CAACsE,IAAV,GAAiB,aAA5B,EAA2C;AAAE5C,QAAAA,MAAM,EAAEA;AAAV,OAA3C,EAA+D;AACnE6C,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAY9D;AADtB;AAD0D,OAA/D,CAAN,CAFE,CAOF;AACD,KARD,CAQE,OAAO+D,KAAP,EAAc;AACdhB,MAAAA,aAAa,CAAC,sDAAD,CAAb;AACAD,MAAAA,UAAU;AACX;AACF,GAzG4B,CA2G7B;;;AACA,QAAMkB,UAAU,GAAG,MAAOrB,OAAP,IAAmB;AACpC,QAAI;AACFe,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB1C,MAAxB;AACA,YAAM3B,KAAK,CAACsE,IAAN,CAAWrE,SAAS,CAACsE,IAAV,GAAiB,WAA5B,EAAyC;AAC7C5C,QAAAA,MAAM,EAAEA,MADqC;AAE7C0B,QAAAA,OAAO,EAAEA;AAFoC,OAAzC,EAGH;AACDmB,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAY9D;AADtB;AADR,OAHG,CAAN;AAQD,KAVD,CAUE,OAAO+D,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAhB,MAAAA,aAAa,CAAC,wCAAD,CAAb;AACAD,MAAAA,UAAU;AACX;AACF,GAhBD,CA5G6B,CA8H7B;;;AACA,iBAAemB,WAAf,GAA6B;AAC3B,QAAI;AACF,YAAM3E,KAAK,CAAC4E,GAAN,CAAU3E,SAAS,CAACsE,IAAV,GAAiB,SAAjB,GAA6B5C,MAAvC,EAA+C,EAA/C,EAAmD;AACvD6C,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAY9D;AADtB;AAD8C,OAAnD,CAAN,CADE,CAMF;;AACAY,MAAAA,eAAe,CAAC,IAAD,CAAf,CAPE,CAQF;;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAVD,CAUE,OAAOiD,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAhB,MAAAA,aAAa,CAAC,iCAAD,CAAb;AACAD,MAAAA,UAAU;AACX;AACF;;AAED,WAASS,YAAT,CAAsBY,GAAtB,EAA2B;AACzB;AACA,QAAIC,YAAJ;;AACA,QAAID,GAAG,CAACE,KAAR,EAAe;AACbX,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BQ,GAAG,CAACE,KAA9B;AACA7D,MAAAA,OAAO,CAAC,EAAD,CAAP;;AACA,WAAK,IAAI8D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACE,KAAJ,CAAUE,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC;AACA,cAAME,QAAQ,GAAG,EAAjB;;AAEA,YAAI,CAACL,GAAG,CAACE,KAAJ,CAAUC,CAAV,EAAaG,MAAlB,EAA0B;AACxBD,UAAAA,QAAQ,CAAC,YAAD,CAAR,GAAyB,QAAzB;AACD,SANwC,CAOzC;;;AACAJ,QAAAA,YAAY,gBAAG;AAA4B,UAAA,KAAK,EAAEI,QAAnC;AAA6C,UAAA,SAAS,EAAC,eAAvD;AAAA,iCACb;AAAK,YAAA,EAAE,EAAEL,GAAG,CAACE,KAAJ,CAAUC,CAAV,EAAaI,GAAtB;AAA2B,YAAA,SAAS,EAAC,MAArC;AAA4C,YAAA,OAAO,EAAGC,CAAD,IAAOC,IAAI,CAACD,CAAD,CAAhE;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,OAAf;AAAA,qCACE;AAAK,gBAAA,KAAK,EAAC,4BAAX;AAAwC,gBAAA,MAAM,EAAC,KAA/C;AAAqD,gBAAA,KAAK,EAAC,KAA3D;AAAA,uCACE;AAAO,kBAAA,SAAS,EAAC,MAAjB;AAAwB,kBAAA,IAAI,EAAC,iBAA7B;AAA+C,kBAAA,MAAM,EAAC,KAAtD;AAA4D,kBAAA,KAAK,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAME;AAAK,cAAA,SAAS,EAAC,MAAf;AAAA,qCACE;AAAK,gBAAA,KAAK,EAAC,4BAAX;AAAwC,gBAAA,MAAM,EAAC,KAA/C;AAAqD,gBAAA,KAAK,EAAC,KAA3D;AAAA,uCACE;AAAO,kBAAA,SAAS,EAAC,MAAjB;AAAwB,kBAAA,IAAI,EAAE,UAAUR,GAAG,CAACE,KAAJ,CAAUC,CAAV,EAAaI,GAAvB,GAA6B,MAA3D;AAAmE,kBAAA,MAAM,EAAC,KAA1E;AAAgF,kBAAA,KAAK,EAAC;AAAtF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADa,WAAUP,GAAG,CAACE,KAAJ,CAAUC,CAAV,EAAaI,GAAvB;AAAA;AAAA;AAAA;AAAA,gBAAf;AAcAlE,QAAAA,OAAO,CAAC6C,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWe,YAAX,CAAV,CAAP;AACD;AACF,KA9BwB,CA+BzB;;;AACA,QAAID,GAAG,CAACU,KAAR,EAAe;AACb,UAAIV,GAAG,CAACU,KAAJ,CAAUC,MAAV,CAAiBvD,OAAO,IAAIA,OAAO,CAACwD,MAAR,KAAmB9E,IAA/C,CAAJ,EAA0D;AACxDiB,QAAAA,IAAI,CAACiC,OAAL,GAAegB,GAAG,CAACU,KAAJ,CAAUC,MAAV,CAAiBvD,OAAO,IAAIA,OAAO,CAACwD,MAAR,KAAmB9E,IAA/C,EAAqD,CAArD,EAAwDiB,IAAvE;AACD,OAHY,CAIb;;;AACA,UAAIiD,GAAG,CAACU,KAAJ,CAAUC,MAAV,CAAiBvD,OAAO,IAAIA,OAAO,CAACL,IAAR,KAAiB,IAA7C,EAAmD,CAAnD,CAAJ,EAA2D;AACzDG,QAAAA,aAAa,CAAC8C,GAAG,CAACU,KAAJ,CAAUC,MAAV,CAAiBvD,OAAO,IAAIA,OAAO,CAACL,IAAR,KAAiB,IAA7C,EAAmD,CAAnD,EAAsD6D,MAAtD,CAA6DC,KAA7D,CAAmE,GAAnE,EAAwE,CAAxE,CAAD,CAAb;AACD;AACF;AACF,GA1L4B,CA2L7B;;;AACA,WAASJ,IAAT,CAAcK,KAAd,EAAqB;AACnB;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAYzC,IAAI,CAACiC,OAAjB;;AACA,QAAIjC,IAAI,CAACiC,OAAT,EAAkB;AAChBhC,MAAAA,KAAK,IAAI,CAAT;AACA,YAAM+D,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBA,UAAxB,CAAmCA,UAAnC,CAA8CF,EAAzD,CAFgB,CAGhB;;AACA,UAAI/D,KAAK,KAAK,CAAd,EAAiB;AACf;AACAG,QAAAA,UAAU,CAAC+D,IAAX,CAAgBC,QAAQ,CAACJ,EAAD,CAAxB,EAFe,CAGf;;AACArF,QAAAA,CAAC,CAAE,IAAGqF,EAAG,EAAR,CAAD,CAAYK,GAAZ,CAAgB,gBAAhB,EAAkC,MAAlC;AACA1F,QAAAA,CAAC,CAAE,IAAGqF,EAAG,EAAR,CAAD,CAAYM,WAAZ,CAAwB,SAAxB;AACD,OAVe,CAWhB;;;AACA,UAAIrE,KAAK,KAAK,CAAd,EAAiB;AACfG,QAAAA,UAAU,CAAC+D,IAAX,CAAgBC,QAAQ,CAACJ,EAAD,CAAxB;AACArF,QAAAA,CAAC,CAAE,IAAGqF,EAAG,EAAR,CAAD,CAAYK,GAAZ,CAAgB,gBAAhB,EAAkC,MAAlC;AACA1F,QAAAA,CAAC,CAAE,IAAGqF,EAAG,EAAR,CAAD,CAAYM,WAAZ,CAAwB,SAAxB,EAHe,CAIf;;AAEAC,QAAAA,UAAU,GAAGC,IAAb,CAAkBC,KAAK,IAAI;AACzBjC,UAAAA,OAAO,CAACC,GAAR,CAAYgC,KAAZ,EADyB,CAEzB;;AACA,cAAI,CAACA,KAAL,EAAY;AACV;AACA,iBAAK,MAAMpF,IAAX,IAAmBe,UAAnB,EAA+B;AAC7BoC,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCpD,IAAlC;AACAV,cAAAA,CAAC,CAAE,IAAGU,IAAK,EAAV,CAAD,CAAcgF,GAAd,CAAkB,gBAAlB,EAAoC,EAApC;AACD;;AACDrC,YAAAA,UAAU,CAAC,MAAM;AACf,mBAAK,MAAM3C,IAAX,IAAmBe,UAAnB,EAA+B;AAC7BoC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCpD,IAAlC;AACAV,gBAAAA,CAAC,CAAE,IAAGU,IAAK,EAAV,CAAD,CAAciF,WAAd,CAA0B,SAA1B;AACD;;AACDrE,cAAAA,KAAK,GAAG,CAAR;AACAG,cAAAA,UAAU,GAAG,EAAb;AACAoC,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBxC,KAAnB;AACD,aARS,EAQP,IARO,CAAV;AASD,WAfD,MAeO;AACLA,YAAAA,KAAK,GAAG,CAAR;AACAG,YAAAA,UAAU,GAAG,EAAb;AACD;AACF,SAtBD,EAsBGsE,KAtBH,CAsBU7B,KAAD,IAAW;AAClBL,UAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD,SAxBD;AAyBAL,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBxC,KAAnB,EA/Be,CAgCf;AACD;AACF;AACF;;AAAA;;AAED,iBAAesE,UAAf,GAA4B;AAC1B;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMvG,KAAK,CAAC4E,GAAN,CAAU3E,SAAS,CAACsE,IAAV,GAAiB,cAA3B,EAA2C;AAAE5C,QAAAA,MAAM,EAAEA,MAAV;AAAkB6E,QAAAA,MAAM,EAAExE;AAA1B,OAA3C,EAAmF;AACxGwC,QAAAA,OAAO,EAAE;AACP,2BAAiB,YAAY9D;AADtB;AAD+F,OAAnF,CAAvB;AAKA,aAAO6F,QAAQ,CAACpC,IAAT,CAAckC,KAArB;AACD,KAPD,CAOE,OAAO5B,KAAP,EAAc;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACD;AACF,GA5P4B,CA8P7B;;;AACA,sBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,MAAM,EAAE1B,cAAlB;AAAkC,MAAA,MAAM,EAAEZ;AAA1C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEgB,IAAb;AAAmB,MAAA,MAAM,EAAEI,WAA3B;AAAA,8BACE,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD,CAAO,IAAP;AAAA,kBAAaF;AAAb;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,KAAD,CAAO,MAAP;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,OAAO,EAAEE,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAaGpC,YAAY,gBACX;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA,+BAAaQ,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGJ,WAAW,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,GAA4D,IAF1E,eAGE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEoD,WAAjB;AAA8B,QAAA,QAAQ,EAAEtD,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,GAKF,IAlBb,EAmBG,CAACF,YAAD,gBAAgB;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACf;AAAA,4BAAUW,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cADe,EAMdb,IANc;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhB,GAOQ,IA1BX,eA2BE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAEF,QAAnB;AAA6B,QAAA,IAAI,EAAEkB,OAAnC;AAA4C,QAAA,QAAQ,EAAEyC;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GAjSuBjE,I;UAGEL,Q,EACPL,W,EAQCD,W;;;KAZIW,I","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useLocation, useNavigate} from 'react-router-dom';\r\n//import Form from \"react-bootstrap/Form\";\r\n//import Button from \"react-bootstrap/Button\";\r\nimport \"../styles/Game.css\";\r\nimport axios from \"axios\";\r\nimport * as constants from './Constants';\r\n//import { useLocation } from \"react-router\";\r\nimport 'react-chatbox-component/dist/style.css';\r\nimport { ChatBox } from 'react-chatbox-component';\r\nimport io from \"socket.io-client\";\r\n//import $ from \"jquery\";\r\nimport useToken from \"../components/useToken\";\r\nimport { Modal } from \"react-bootstrap\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport $ from 'jquery';\r\nimport Confetti from 'react-dom-confetti';\r\n\r\n\r\n\r\nexport default function Game() {\r\n  // Variables\r\n  // Get User and Token\r\n  const { token, user } = useToken();\r\n  const navigate = useNavigate();\r\n  const [mount, setMount] = useState({});\r\n  const [messages, setMessages] = useState([]);\r\n  const [card, setCard] = useState([]);\r\n  const [startVisible, setStartVisible] = useState(true);\r\n  const [disableStart, setDisableStart] = useState(false);\r\n  const [waitVisible, setWaitVisible] = useState(false);\r\n  let initialGameState = 0;\r\n  const { state } = useLocation();\r\n  const { roomID } = state;\r\n  const turn = useRef(false)\r\n  let count = 0;\r\n  const [playerTurn, setPlayerTurn] = useState(\"\");\r\n  let pointArray = [];\r\n  const userObj = {\r\n    uid: user\r\n  }\r\n  // Config object for the confetti\r\n  const config = {\r\n    angle: \"213\",\r\n    spread: 360,\r\n    startVelocity: 40,\r\n    elementCount: \"200\",\r\n    dragFriction: 0.12,\r\n    duration: 3000,\r\n    stagger: \"5\",\r\n    width: \"10px\",\r\n    height: \"10px\",\r\n    perspective: \"500px\",\r\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n  };\r\n  const [activeConfetti, setActiveConfetti] = useState(false);\r\n  // Initialize Webssockets\r\n  let chatSocket = useRef();\r\n  let gameSocket = useRef();\r\n  //Modal Data\r\n  const [show, setShow] = useState(false);\r\n  // Message array for chatbox\r\n  const [message, setMessage] = useState(\"\")\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleMessage = (text) => setMessage(text)\r\n  //const { state } = useLocation();\r\n\r\n  // Code that is run immediately \r\n  useEffect(() => {\r\n    // connect to sockets\r\n    startWebSocket();\r\n    // Wait about a second to connect to websockets since they just\r\n    // got created in the backend\r\n    setTimeout(() => {\r\n      // Connect to web sockets\r\n      chatSocket.current = io(\"http://localhost:3003/chat/\" + roomID);\r\n      gameSocket.current = io(\"http://localhost:3003/game/\" + roomID);\r\n      // Add to message array when recieving a message\r\n      chatSocket.current.on(\"text\", (message) => {\r\n        setMessages(array => [...array, message])\r\n      })\r\n      // On start\r\n      gameSocket.current.on(\"start\", (start) => {\r\n        // disable start button\r\n        setStartVisible(false);\r\n        if (initialGameState === 0) {\r\n          // Load the game state\r\n          SetGameState(start);\r\n          initialGameState++;\r\n        }\r\n\r\n      })\r\n      // On win, show which user won \r\n      gameSocket.current.on(\"win\", (username) => {\r\n        handleMessage(`${username} wins!!!`)\r\n        handleShow();\r\n        // Shower with confetti\r\n        setActiveConfetti(true)\r\n        setTimeout(() => {\r\n          navigate(\"/\")\r\n        }, 5000)\r\n      })\r\n      // On update, updatehe game state\r\n      gameSocket.current.on(\"update\", (data) => {\r\n        SetGameState(data)\r\n      })\r\n    }, 1500);\r\n    return () => { setMount({}); }\r\n  }, [])\r\n\r\n  // Code to initialize chat web socket\r\n  async function startWebSocket() {\r\n    try {\r\n      console.log(\"roomID: \", roomID)\r\n      await axios.post(constants.HOST + \"/initialize\", { roomID: roomID }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n      //setUser(await jwtDecode(token).username);\r\n    } catch (error) {\r\n      handleMessage(\"Couldn't Connect To Socket. Try Refreshing the Page.\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  // Code that is called when chat is sent. Sends chat to API\r\n  const handleChat = async (message) => {\r\n    try {\r\n      console.log(\"roomID: \", roomID)\r\n      await axios.post(constants.HOST + \"/sendChat\", {\r\n        roomID: roomID,\r\n        message: message\r\n      }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error)\r\n      handleMessage(\"Couldn't Send Chat Message. Try Again!\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  // Code called when Start Game button is clicked\r\n  async function handleStart() {\r\n    try {\r\n      await axios.put(constants.HOST + \"/start/\" + roomID, {}, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n      // Disable the start button\r\n      setDisableStart(true);\r\n      // Display message that you're waiting for the other person to continue\r\n      setWaitVisible(true);\r\n    } catch (error) {\r\n      console.log(error)\r\n      handleMessage(\"Couldn't Start Game. Try Again!\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  function SetGameState(obj) {\r\n    // Create CardArray\r\n    let responseCard;\r\n    if (obj.cards) {\r\n      console.log(\"in Cards: \", obj.cards)\r\n      setCard([])\r\n      for (let i = 0; i < obj.cards.length; i++) {\r\n        // Hide cards if the cards have already been matched\r\n        const disabled = {\r\n        }\r\n        if (!obj.cards[i].active) {\r\n          disabled[\"visibility\"] = \"hidden\";\r\n        }\r\n        // Create card\r\n        responseCard = <div key={obj.cards[i].key} style={disabled} className=\"cardContainer\">\r\n          <div id={obj.cards[i].key} className=\"card\" onClick={(e) => flip(e)}>\r\n            <div className=\"front\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"100\" width=\"100\" >\r\n                <image className=\"Card\" href=\"/img/castle.svg\" height=\"100\" width=\"100\" />\r\n              </svg>\r\n            </div>\r\n            <div className=\"back\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"100\" width=\"100\" >\r\n                <image className=\"Card\" href={\"/img/\" + obj.cards[i].key + \".svg\"} height=\"100\" width=\"100\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        setCard(array => [...array, responseCard])\r\n      }\r\n    }\r\n    // set turn\r\n    if (obj.users) {\r\n      if (obj.users.filter(userObj => userObj.userID === user)) {\r\n        turn.current = obj.users.filter(userObj => userObj.userID === user)[0].turn\r\n      }\r\n      // Set who's turn it is in string form\r\n      if (obj.users.filter(userObj => userObj.turn === true)[0]) {\r\n        setPlayerTurn(obj.users.filter(userObj => userObj.turn === true)[0].userID.split(\"#\")[0])\r\n      }\r\n    }\r\n  }\r\n  // Responsible for flipping the cards\r\n  function flip(event) {\r\n    //increment count flip\r\n    console.log(turn.current)\r\n    if (turn.current) {\r\n      count += 1;\r\n      const id = event.target.parentNode.parentNode.parentNode.id;\r\n      // On first flip\r\n      if (count === 1) {\r\n        // Add id to array\r\n        pointArray.push(parseInt(id));\r\n        // Disable then flip the card\r\n        $(`#${id}`).css(\"pointer-events\", \"none\")\r\n        $(`#${id}`).toggleClass('flipped');\r\n      }\r\n      // On second flip\r\n      if (count === 2) {\r\n        pointArray.push(parseInt(id))\r\n        $(`#${id}`).css(\"pointer-events\", \"none\")\r\n        $(`#${id}`).toggleClass('flipped');\r\n        // If cards match, disable immediately\r\n\r\n        verifyFlip().then(match => {\r\n          console.log(match)\r\n          // If the cards dont match\r\n          if (!match) {\r\n            //Remove pointer-events: none\r\n            for (const card of pointArray) {\r\n              console.log(\"This. is starage: \", card)\r\n              $(`#${card}`).css(\"pointer-events\", \"\")\r\n            }\r\n            setTimeout(() => {\r\n              for (const card of pointArray) {\r\n                console.log(\"This. is starage: \", card)\r\n                $(`#${card}`).toggleClass(\"flipped\")\r\n              }\r\n              count = 0;\r\n              pointArray = [];\r\n              console.log(\"1: \", count)\r\n            }, 1000)\r\n          } else {\r\n            count = 0;\r\n            pointArray = [];\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error)\r\n        })\r\n        console.log(\"2: \", count)\r\n        //$(`#${id}`).toggleClass('flipped');s\r\n      }\r\n    }\r\n  };\r\n\r\n  async function verifyFlip() {\r\n    // check if it's user's turn\r\n    try {\r\n      const response = await axios.put(constants.HOST + \"/room/points\", { roomID: roomID, points: pointArray }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n      return response.data.match;\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // HTML\r\n  return (\r\n    <div id=\"container\">\r\n      <Confetti active={activeConfetti} config={config} />\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{message}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"Primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      {startVisible ?\r\n        <div className=\"startGame\">\r\n          <h3>RoomID: {roomID}</h3>\r\n          {waitVisible ? <h4>Waiting for other person to start the game...</h4> : null}\r\n          <Button onClick={handleStart} disabled={disableStart}>Start Game</Button>\r\n        </div> : null}\r\n      {!startVisible ? <div className=\"Game\">\r\n        <h3>It's {playerTurn}'s turn</h3>\r\n        {/* <img src=\"/img/abstract_scene.svg\" className=\"Card\" height=\"200\" width=\"150\"/> */}\r\n        {/* <svg id=\"Container\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" viewBox=\"0 0 285 50\">\r\n          <rect height=\"200\" width=\"300\" />\r\n        </svg> */}\r\n        {card}\r\n      </div> : null}\r\n      <div className=\"Chat\">\r\n        <h3>Chat</h3>\r\n        <ChatBox messages={messages} user={userObj} onSubmit={handleChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}