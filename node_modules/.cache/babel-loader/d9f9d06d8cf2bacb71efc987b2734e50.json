{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ezana\\\\OneDrive\\\\Desktop\\\\2021-2022 Fall\\\\SecureWebAppDev\\\\CardFlipper\\\\frontend\\\\src\\\\containers\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from 'react-router-dom'; //import Form from \"react-bootstrap/Form\";\n//import Button from \"react-bootstrap/Button\";\n\nimport \"../styles/Game.css\";\nimport axios from \"axios\";\nimport * as constants from './Constants'; //import { useLocation } from \"react-router\";\n\nimport 'react-chatbox-component/dist/style.css';\nimport { ChatBox } from 'react-chatbox-component';\nimport io from \"socket.io-client\"; //import $ from \"jquery\";\n\nimport useToken from \"../components/useToken\";\nimport { Modal } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  // Variables\n  //const [room, setRoom] = useState(\"\");\n  const {\n    token,\n    user\n  } = useToken();\n  const [mount, setMount] = useState({});\n  const [messages, setMessages] = useState([]);\n  const [card, setCard] = useState([]);\n  const [startVisible, setStartVisible] = useState(true);\n  const [disableStart, setDisableStart] = useState(false);\n  const [waitVisible, setWaitVisible] = useState(false);\n  const {\n    state\n  } = useLocation();\n  const {\n    roomID\n  } = state; //const [user, setUser] = useState(\"\");\n\n  const turn = useRef(false);\n  let count = 0;\n  const [playerTurn, setPlayerTurn] = useState(\"\");\n  const [pointArray, setPointArray] = useState([]);\n  const userObj = {\n    uid: user\n  }; // const cardArray = ['clubs_2.svg', 'clubs_3.svg', 'clubs_4.svg', 'clubs_5.svg', 'clubs_6.svg', 'clubs_7.svg', 'clubs_8.svg',\n  //   'clubs_9.svg', 'clubs_10.svg', 'clubs_ace.svg', 'clubs_jack.svg', 'clubs_king.svg', 'clubs_queen.svg', 'diamonds_2.svg',\n  //   'diamonds_3.svg', 'diamonds_4.svg', 'diamonds_5.svg', 'diamonds_6.svg', 'diamonds_7.svg', 'diamonds_8.svg', 'diamonds_9.svg',\n  //   'diamonds_10.svg', 'diamonds_ace.svg', 'diamonds_jack.svg', 'diamonds_king.svg', 'diamonds_queen.svg',\n  //   'hearts_2.svg', 'hearts_3.svg', 'hearts_4.svg', 'hearts_5.svg', 'hearts_6.svg', 'hearts_7.svg', 'hearts_8.svg',\n  //   'hearts_9.svg', 'hearts_10.svg', 'hearts_ace.svg', 'hearts_jack.svg', 'hearts_king.svg', 'hearts_queen.svg',\n  //   'spades_2.svg', 'spades_3.svg', 'spades_4.svg', 'spades_5.svg', 'spades_6.svg', 'spades_7.svg', 'spades_8.svg', 'spades_9.svg',\n  //   'spades_10.svg', 'spades_ace.svg', 'spades_jack.svg', 'spades_king.svg', 'spades_queen.svg'];\n\n  let chatSocket = useRef();\n  let gameSocket = useRef(); //Modal Data\n\n  const [show, setShow] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const handleMessage = text => setMessage(text); //const { state } = useLocation();\n  // Code that is run immediately \n\n\n  useEffect(() => {\n    // connect to sockets\n    startWebSocket();\n    setTimeout(() => {\n      chatSocket.current = io(\"http://localhost:3003/chat/\" + roomID);\n      gameSocket.current = io(\"http://localhost:3003/game/\" + roomID);\n      chatSocket.current.on(\"text\", message => {\n        setMessages(array => [...array, message]);\n      });\n      gameSocket.current.on(\"start\", async start => {\n        setStartVisible(false); // Sets the game state\n\n        axios.get(constants.HOST + \"/room/\" + roomID, {\n          headers: {\n            \"Authorization\": \"Bearer \" + token\n          }\n        }).then(response => {\n          SetGameState(response.data);\n        }).catch(error => {\n          console.log(error);\n          handleMessage(\"Couldn't Get Cards! Try Again\");\n          handleShow();\n        });\n      });\n    }, 1000);\n    return () => {\n      setMount({});\n    };\n  }, []); // Code to initialize chat web socket\n\n  async function startWebSocket() {\n    try {\n      console.log(\"roomID: \", roomID);\n      await axios.post(constants.HOST + \"/initialize\", {\n        roomID: roomID\n      }, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      }); //setUser(await jwtDecode(token).username);\n    } catch (error) {\n      handleMessage(\"Couldn't Connect To Socket. Try Refreshing the Page.\");\n      handleShow();\n    }\n  } // Code that is called when chat is sent\n\n\n  const handleChat = async message => {\n    try {\n      console.log(\"roomID: \", roomID);\n      await axios.post(constants.HOST + \"/sendChat\", {\n        roomID: roomID,\n        message: message\n      }, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      handleMessage(\"Couldn't Send Chat Message. Try Again!\");\n      handleShow();\n    }\n  }; // Code called when Start Game button is clicked\n\n\n  async function handleStart() {\n    try {\n      await axios.put(constants.HOST + \"/start/\" + roomID, {}, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      }); // Disable the start button\n\n      setDisableStart(true); // Display message that you're waiting for the other person to continue\n\n      setWaitVisible(true);\n    } catch (error) {\n      console.log(error);\n      handleMessage(\"Couldn't Start Game. Try Again!\");\n      handleShow();\n    }\n  }\n\n  function SetGameState(obj) {\n    setCard([]); // Create CardArray\n\n    let responseCard;\n\n    for (let i = 0; i < obj.cards.length; i++) {\n      responseCard = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: obj.cards[i].key,\n          className: \"card\",\n          onClick: e => flip(e),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"front\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              height: \"100\",\n              width: \"100\",\n              children: /*#__PURE__*/_jsxDEV(\"image\", {\n                className: \"Card\",\n                href: \"/img/castle.svg\",\n                height: \"100\",\n                width: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"back\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              height: \"100\",\n              width: \"100\",\n              children: /*#__PURE__*/_jsxDEV(\"image\", {\n                className: \"Card\",\n                href: \"/img/\" + obj.cards[i].key + \".svg\",\n                height: \"100\",\n                width: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)\n      }, obj.cards[i].key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 28\n      }, this);\n      setCard(array => [...array, responseCard]);\n    } // set turn\n\n\n    if (obj.users.filter(userObj => userObj.userID === user)) {\n      console.log(\"hi\");\n      turn.current = obj.users.filter(userObj => userObj.userID === user)[0].turn;\n    } // Set who's turn it is in string form\n\n\n    if (obj.users.filter(userObj => userObj.turn === true)[0]) {\n      setPlayerTurn(obj.users.filter(userObj => userObj.turn === true)[0].userID.split(\"#\")[0]);\n    } // for (let i = 0; i < response.data.users.length; i++) {\n    //   if (response.data.users[i].userID === user) {\n    //     console.log(\"Before: \", turn)\n    //     setTurn(response.data.users[i].turn)\n    //     console.log(\"After: \",turn)\n    //   }\n    //   if (response.data.users[i].turn === true) {\n    //     setPlayerTurn(response.data.users[i].userID.split(\"#\")[0])\n    //   }\n    // }\n\n  } // Responsible for flipping the cards\n\n\n  function flip(event) {\n    //increment count flip\n    console.log(turn.current);\n\n    if (turn.current) {\n      count += 1;\n      console.log(count);\n      const id = event.target.parentNode.parentNode.parentNode.id;\n\n      if (count === 1) {\n        setPointArray(array => [...array, id]);\n        $(`#${id}`).css(\"pointer-events\", \"none\");\n        $(`#${id}`).toggleClass('flipped');\n      }\n\n      if (count === 2) {\n        console.log(\"hey id: \", id);\n        setPointArray(array => [...array, id]);\n        $(`#${id}`).css(\"pointer-events\", \"none\");\n        $(`#${id}`).toggleClass('flipped'); // If cards match, disable immediately\n        // If not, flip back over and \n\n        verifyFlip();\n        setPointArray([]); //$(`#${id}`).toggleClass('flipped');\n      }\n    }\n  }\n\n  ;\n\n  async function verifyFlip() {\n    // check if it's user's turn\n    axios.put(constants.HOST + \"/room/points\", {\n      roomID: roomID,\n      points: pointArray\n    }, {\n      headers: {\n        \"Authorization\": \"Bearer \" + token\n      }\n    }).then(response => {\n      SetGameState(response);\n    }).catch(error => {});\n  } // HTML\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"Primary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), startVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startGame\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"RoomID: \", roomID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this), waitVisible ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Waiting for other person to start the game...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 26\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleStart,\n        disabled: disableStart,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this) : null, !startVisible ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"It's \", playerTurn, \" turn\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), card]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 24\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatBox, {\n        messages: messages,\n        user: userObj,\n        onSubmit: handleChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"AjGZXcPYhh7MREN5LTrKFUd1cLM=\", false, function () {\n  return [useToken, useLocation];\n});\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/ezana/OneDrive/Desktop/2021-2022 Fall/SecureWebAppDev/CardFlipper/frontend/src/containers/Game.js"],"names":["React","useState","useEffect","useRef","useLocation","axios","constants","ChatBox","io","useToken","Modal","Button","$","Game","token","user","mount","setMount","messages","setMessages","card","setCard","startVisible","setStartVisible","disableStart","setDisableStart","waitVisible","setWaitVisible","state","roomID","turn","count","playerTurn","setPlayerTurn","pointArray","setPointArray","userObj","uid","chatSocket","gameSocket","show","setShow","message","setMessage","handleClose","handleShow","handleMessage","text","startWebSocket","setTimeout","current","on","array","start","get","HOST","headers","then","response","SetGameState","data","catch","error","console","log","post","handleChat","handleStart","put","obj","responseCard","i","cards","length","key","e","flip","users","filter","userID","split","event","id","target","parentNode","css","toggleClass","verifyFlip","points"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\n//import Form from \"react-bootstrap/Form\";\r\n//import Button from \"react-bootstrap/Button\";\r\nimport \"../styles/Game.css\";\r\nimport axios from \"axios\";\r\nimport * as constants from './Constants';\r\n//import { useLocation } from \"react-router\";\r\nimport 'react-chatbox-component/dist/style.css';\r\nimport { ChatBox } from 'react-chatbox-component';\r\nimport io from \"socket.io-client\";\r\n//import $ from \"jquery\";\r\nimport useToken from \"../components/useToken\";\r\nimport { Modal } from \"react-bootstrap\"\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport $ from 'jquery';\r\n\r\n\r\nexport default function Game() {\r\n  // Variables\r\n  //const [room, setRoom] = useState(\"\");\r\n  const { token, user } = useToken();\r\n  const [mount, setMount] = useState({});\r\n  const [messages, setMessages] = useState([]);\r\n  const [card, setCard] = useState([]);\r\n  const [startVisible, setStartVisible] = useState(true);\r\n  const [disableStart, setDisableStart] = useState(false);\r\n  const [waitVisible, setWaitVisible] = useState(false);\r\n  const { state } = useLocation();\r\n  const { roomID } = state;\r\n  //const [user, setUser] = useState(\"\");\r\n  const turn = useRef(false)\r\n  let count = 0;\r\n  const [playerTurn, setPlayerTurn] = useState(\"\");\r\n  const [pointArray, setPointArray] = useState([])\r\n  const userObj = {\r\n    uid: user\r\n  }\r\n  // const cardArray = ['clubs_2.svg', 'clubs_3.svg', 'clubs_4.svg', 'clubs_5.svg', 'clubs_6.svg', 'clubs_7.svg', 'clubs_8.svg',\r\n  //   'clubs_9.svg', 'clubs_10.svg', 'clubs_ace.svg', 'clubs_jack.svg', 'clubs_king.svg', 'clubs_queen.svg', 'diamonds_2.svg',\r\n  //   'diamonds_3.svg', 'diamonds_4.svg', 'diamonds_5.svg', 'diamonds_6.svg', 'diamonds_7.svg', 'diamonds_8.svg', 'diamonds_9.svg',\r\n  //   'diamonds_10.svg', 'diamonds_ace.svg', 'diamonds_jack.svg', 'diamonds_king.svg', 'diamonds_queen.svg',\r\n  //   'hearts_2.svg', 'hearts_3.svg', 'hearts_4.svg', 'hearts_5.svg', 'hearts_6.svg', 'hearts_7.svg', 'hearts_8.svg',\r\n  //   'hearts_9.svg', 'hearts_10.svg', 'hearts_ace.svg', 'hearts_jack.svg', 'hearts_king.svg', 'hearts_queen.svg',\r\n  //   'spades_2.svg', 'spades_3.svg', 'spades_4.svg', 'spades_5.svg', 'spades_6.svg', 'spades_7.svg', 'spades_8.svg', 'spades_9.svg',\r\n  //   'spades_10.svg', 'spades_ace.svg', 'spades_jack.svg', 'spades_king.svg', 'spades_queen.svg'];\r\n\r\n  let chatSocket = useRef();\r\n  let gameSocket = useRef();\r\n  //Modal Data\r\n  const [show, setShow] = useState(false);\r\n  const [message, setMessage] = useState(\"\")\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const handleMessage = (text) => setMessage(text)\r\n  //const { state } = useLocation();\r\n\r\n  // Code that is run immediately \r\n  useEffect(() => {\r\n    // connect to sockets\r\n    startWebSocket();\r\n    setTimeout(() => {\r\n      chatSocket.current = io(\"http://localhost:3003/chat/\" + roomID);\r\n      gameSocket.current = io(\"http://localhost:3003/game/\" + roomID);\r\n      chatSocket.current.on(\"text\", (message) => {\r\n        setMessages(array => [...array, message])\r\n      })\r\n      gameSocket.current.on(\"start\", async (start) => {\r\n        setStartVisible(false)\r\n        // Sets the game state\r\n        axios.get(constants.HOST + \"/room/\" + roomID, {\r\n          headers: {\r\n            \"Authorization\": \"Bearer \" + token\r\n          }\r\n        }).then(response => {\r\n          SetGameState(response.data);\r\n        }).catch(error => {\r\n          console.log(error)\r\n          handleMessage(\"Couldn't Get Cards! Try Again\")\r\n          handleShow();\r\n        });\r\n\r\n      })\r\n    }, 1000);\r\n    return () => { setMount({}); }\r\n  }, [])\r\n\r\n  // Code to initialize chat web socket\r\n  async function startWebSocket() {\r\n    try {\r\n      console.log(\"roomID: \", roomID)\r\n      await axios.post(constants.HOST + \"/initialize\", { roomID: roomID }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n      //setUser(await jwtDecode(token).username);\r\n    } catch (error) {\r\n      handleMessage(\"Couldn't Connect To Socket. Try Refreshing the Page.\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  // Code that is called when chat is sent\r\n  const handleChat = async (message) => {\r\n    try {\r\n      console.log(\"roomID: \", roomID)\r\n      await axios.post(constants.HOST + \"/sendChat\", {\r\n        roomID: roomID,\r\n        message: message\r\n      }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log(error)\r\n      handleMessage(\"Couldn't Send Chat Message. Try Again!\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  // Code called when Start Game button is clicked\r\n  async function handleStart() {\r\n    try {\r\n      await axios.put(constants.HOST + \"/start/\" + roomID, {}, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      });\r\n      // Disable the start button\r\n      setDisableStart(true);\r\n      // Display message that you're waiting for the other person to continue\r\n      setWaitVisible(true);\r\n    } catch (error) {\r\n      console.log(error)\r\n      handleMessage(\"Couldn't Start Game. Try Again!\")\r\n      handleShow();\r\n    }\r\n  }\r\n\r\n  function SetGameState(obj) {\r\n    setCard([])\r\n          // Create CardArray\r\n          let responseCard;\r\n          for (let i = 0; i < obj.cards.length; i++) {\r\n            responseCard = <div key={obj.cards[i].key} className=\"cardContainer\">\r\n              <div id={obj.cards[i].key} className=\"card\" onClick={(e) => flip(e)}>\r\n                <div className=\"front\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"100\" width=\"100\" >\r\n                    <image className=\"Card\" href=\"/img/castle.svg\" height=\"100\" width=\"100\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"back\">\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"100\" width=\"100\" >\r\n                    <image className=\"Card\" href={\"/img/\" + obj.cards[i].key + \".svg\"} height=\"100\" width=\"100\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            setCard(array => [...array, responseCard])\r\n          }\r\n          // set turn\r\n          if (obj.users.filter(userObj => userObj.userID === user)) {\r\n            console.log(\"hi\")\r\n            turn.current = obj.users.filter(userObj => userObj.userID === user)[0].turn\r\n          }\r\n          // Set who's turn it is in string form\r\n          if (obj.users.filter(userObj => userObj.turn === true)[0]) {\r\n            setPlayerTurn(obj.users.filter(userObj => userObj.turn === true)[0].userID.split(\"#\")[0])\r\n          }\r\n          // for (let i = 0; i < response.data.users.length; i++) {\r\n          //   if (response.data.users[i].userID === user) {\r\n          //     console.log(\"Before: \", turn)\r\n          //     setTurn(response.data.users[i].turn)\r\n          //     console.log(\"After: \",turn)\r\n          //   }\r\n          //   if (response.data.users[i].turn === true) {\r\n          //     setPlayerTurn(response.data.users[i].userID.split(\"#\")[0])\r\n          //   }\r\n          // }\r\n  }\r\n  // Responsible for flipping the cards\r\n  function flip(event) {\r\n    //increment count flip\r\n    console.log(turn.current)\r\n    if (turn.current) {\r\n      count += 1;\r\n      console.log(count)\r\n      const id = event.target.parentNode.parentNode.parentNode.id;\r\n      if (count === 1) {\r\n        setPointArray(array => [...array, id])\r\n        $(`#${id}`).css(\"pointer-events\", \"none\")\r\n        $(`#${id}`).toggleClass('flipped');\r\n      }\r\n      if (count === 2) {\r\n        console.log(\"hey id: \", id)\r\n        setPointArray(array => [...array, id])\r\n        $(`#${id}`).css(\"pointer-events\", \"none\")\r\n\r\n        $(`#${id}`).toggleClass('flipped');\r\n        // If cards match, disable immediately\r\n        \r\n        // If not, flip back over and \r\n        verifyFlip()\r\n  \r\n        setPointArray([]);\r\n        //$(`#${id}`).toggleClass('flipped');\r\n        \r\n      }\r\n    }\r\n  };\r\n\r\n  async function verifyFlip() {\r\n    // check if it's user's turn\r\n      axios.put(constants.HOST + \"/room/points\", { roomID: roomID, points: pointArray }, {\r\n        headers: {\r\n          \"Authorization\": \"Bearer \" + token\r\n        }\r\n      }).then(response => {\r\n        SetGameState(response)\r\n      }).catch(error => {\r\n\r\n      });\r\n\r\n  }\r\n  // HTML\r\n  return (\r\n    <div id=\"container\">\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Message</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{message}</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"Primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      {startVisible ?\r\n        <div className=\"startGame\">\r\n          <h3>RoomID: {roomID}</h3>\r\n          {waitVisible ? <h4>Waiting for other person to start the game...</h4> : null}\r\n          <Button onClick={handleStart} disabled={disableStart}>Start Game</Button>\r\n        </div> : null}\r\n      {!startVisible ? <div className=\"Game\">\r\n        <h3>It's {playerTurn} turn</h3>\r\n        {/* <img src=\"/img/abstract_scene.svg\" className=\"Card\" height=\"200\" width=\"150\"/> */}\r\n        {/* <svg id=\"Container\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" viewBox=\"0 0 285 50\">\r\n          <rect height=\"200\" width=\"300\" />\r\n        </svg> */}\r\n        {card}\r\n      </div> : null}\r\n      <div className=\"Chat\">\r\n        <h3>Chat</h3>\r\n        <ChatBox messages={messages} user={userObj} onSubmit={handleChat} />\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}